\name{abcSmc}
\alias{abcSmc}
\title{Run an ABC-SMC algorithm for infering the parameters of a forward model}
\description{
Run an ABC-SMC algorithm for infering the parameters of a forward model. TODO: MORE!
}
\usage{
abcSmc(N, rprior, dprior, rdist, rperturb, dperturb, factor=10,
                   steps=15, verb=FALSE)
}
\arguments{
  \item{N}{An integer representing the number of simulations to pass on at each stage of the SMC algorithm. Note that the TOTAL number of forward simulations required by the algorithm will be (roughly) 'N*steps*factor'.}
  \item{rprior}{A function without arguments generating a single parameter (vector) from prior distribution.}
  \item{dprior}{A function with required parameter a parameter (such as generated by 'rprior') and optional parameter 'log' returing the (log) density of the parameter under the prior distribution.}
  \item{rdist}{A function taking a parameter (vector) as argument and returning a scalar "distance" representing a measure of how good the chosen parameter is. This will typically be computed by first using the parameter to run a forward model, then computing required summary statistics, then computing a distance. See the example for details.}
  \item{rperturb}{TODO: MORE!}
  \item{dperturb}{TODO: MORE!}
  \item{factor}{TODO: MORE!}
  \item{steps}{TODO: MORE!}
  \item{verb}{Boolean indicating whether some progress should be printed to the console (the number of steps remaining).}
}
\value{
A matrix (or vector) with rows (or elemenets) representing samples from the approximate posterior distribution.
}
\seealso{\code{\link{pfMLLik}}, \code{\link{StepGillespie}}, \code{\link{abcRun}},
 \code{\link{simTs}}, \code{\link{stepLVc}}}
\examples{
\donttest{
data(LVdata)
rprior <- function() { c(runif(1, -3, 3), runif(1, -8, -2), runif(1, -4, 2)) }
dprior <- function(x, ...) { dunif(x[1], -3, 3, ...) + 
                dunif(x[2], -8, -2, ...) + dunif(x[3], -4, 2, ...) }
rmodel <- function(th) { simTs(c(50,100), 0, 30, 2, stepLVc, exp(th)) }
rperturb <- function(th){th + rnorm(3, 0, 0.5)}
dperturb <- function(thOld, thNew, ...){sum(dnorm(thNew, thOld, 0.5, ...))}
sumStats <- identity
ssd = sumStats(LVperfect)
distance <- function(s) {
    diff = s - ssd
    sqrt(sum(diff*diff))
}
rdist <- function(th) { distance(sumStats(rmodel(th))) }
out = abcSmc(10000, rprior, dprior, rdist, rperturb,
             dperturb, verb=TRUE, steps=8)
print(summary(out))
}
}

\keyword{smfsb}

